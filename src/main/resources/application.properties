spring.jpa.show-sql=true
spring.jpa.open-in-view=true
spring.output.ansi.enabled=always

server.port=${APP_PORT:8082}

spring.datasource.url=${BANCO_DE_DADOS_URL:jdbc:mysql://localhost:3306/transacao?createDatabaseIfNotExist=true}
spring.datasource.username=${BANCO_DE_DADOS_USERNAME:root}
spring.datasource.password=${BANCO_DE_DADOS_PASSWORD:safadotaba}
spring.jpa.hibernate.ddl-auto=update

# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Endereco do Kafka
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}

# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:transacao-aplicacao}

# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}

spring.kafka.topic.transactions=transacoes

# Configuração do Spring Security com Oauth2/Keycloak
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/template-proposta}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/template-proposta/protocol/openid-connect/certs}
